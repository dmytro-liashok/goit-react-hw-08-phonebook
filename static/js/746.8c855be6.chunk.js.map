{"version":3,"file":"static/js/746.8c855be6.chunk.js","mappings":"gMACA,EAAuB,2BAAvB,EAA0D,4BAA1D,EAA8F,4BAA9F,EAAyK,mCAAzK,EAA2N,mCAA3N,EAA6Q,mCAA7Q,EAAyT,6B,uCCKnTA,GAASC,EAAAA,EAAAA,MACTC,GAAQD,EAAAA,EAAAA,MAwEd,EAtEqB,WACnB,IAAME,GAAWC,EAAAA,EAAAA,MAejB,OACE,+BACE,kBAAMC,SAfW,SAAAC,GACnBA,EAAMC,iBACN,IAAMC,EAAOF,EAAMG,OAAOD,KAAKE,MACzBC,EAASL,EAAMG,OAAOE,OAAOD,MAC7BE,EAAa,CACjBC,IAAIZ,EAAAA,EAAAA,MACJO,KAAAA,EACAG,OAAAA,GAEFR,GAASW,EAAAA,EAAAA,IAAWF,IACpBN,EAAMS,cAAcC,OACrB,EAIiCC,UAAWC,EAAUC,aAAa,MAAhE,WACE,mBAAOC,QAASpB,EAAQiB,UAAWC,EAAnC,UAA8C,QAE5C,kBACED,UAAWC,EACXG,KAAK,OACLb,KAAK,OACLK,GAAIb,EACJsB,QAAQ,2HACRC,MAAM,yIACNC,UAAQ,EACRC,UAAW,SAGf,mBAAOL,QAASlB,EAAOe,UAAWC,EAAlC,UAA6C,UAE3C,kBACED,UAAWC,EACXG,KAAK,MACLb,KAAK,SACLK,GAAIX,EACJoB,QAAQ,qGACRC,MAAM,+FACNE,UAAW,GACXD,UAAQ,QAGZ,oBAAQH,KAAK,SAASJ,UAAWC,EAAjC,WACE,iBAAMD,UAAWC,EAAjB,SAAmC,iBACnC,iBAAMD,UAAWC,EAAjB,UACE,iBACEQ,MAAM,6BACNC,MAAM,KACNC,QAAQ,YACRC,YAAY,IACZC,eAAe,QACfC,cAAc,QACdC,OAAO,eACPC,OAAO,KACPC,KAAK,OACLjB,UAAWC,EAVb,WAYE,iBAAMiB,GAAG,KAAKC,GAAG,IAAIC,GAAG,KAAKC,GAAG,QAChC,iBAAMH,GAAG,KAAKC,GAAG,KAAKC,GAAG,KAAKC,GAAG,kBAO9C,C,wDC5EM,IAkBIrC,EAAS,eAACsC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAAC9B,EAAI+B,GAWvD,OARE/B,IAFF+B,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactsForm.module.css?d51f","components/ContactForm/ContactsForm.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactsForm_form__nFk0S\",\"input\":\"ContactsForm_input__pcN7H\",\"label\":\"ContactsForm_label__--I3L\",\"cut\":\"ContactsForm_cut__ts1Eu\",\"buttonSubmit\":\"ContactsForm_buttonSubmit__P7LOg\",\"button__icon\":\"ContactsForm_button__icon__rdpuv\",\"button__text\":\"ContactsForm_button__text__4VnOi\",\"svgBtn\":\"ContactsForm_svgBtn__zh810\"};","import React from 'react';\nimport css from './ContactsForm.module.css';\nimport { nanoid } from 'nanoid';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contactsReducer';\n\nconst nameId = nanoid();\nconst telId = nanoid();\n\nconst ContactsForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const name = event.target.name.value;\n    const number = event.target.number.value;\n    const newContact = {\n      id: nanoid(),\n      name,\n      number,\n    };\n    dispatch(addContact(newContact));\n    event.currentTarget.reset();\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit} className={css.form} autoComplete=\"off\">\n        <label htmlFor={nameId} className={css.label}>\n          Name\n          <input\n            className={css.input}\n            type=\"text\"\n            name=\"name\"\n            id={nameId}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            maxLength={20}\n          />\n        </label>\n        <label htmlFor={telId} className={css.label}>\n          Number\n          <input\n            className={css.input}\n            type=\"tel\"\n            name=\"number\"\n            id={telId}\n            pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            maxLength={12}\n            required\n          />\n        </label>\n        <button type=\"submit\" className={css.buttonSubmit}>\n          <span className={css.button__text}>Add Contact</span>\n          <span className={css.button__icon}>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"24\"\n              viewBox=\"0 0 24 24\"\n              strokeWidth=\"2\"\n              strokeLinejoin=\"round\"\n              strokeLinecap=\"round\"\n              stroke=\"currentColor\"\n              height=\"24\"\n              fill=\"none\"\n              className={css.svgBtn}\n            >\n              <line y2=\"19\" y1=\"5\" x2=\"12\" x1=\"12\"></line>\n              <line y2=\"12\" y1=\"12\" x2=\"19\" x1=\"5\"></line>\n            </svg>\n          </span>\n        </button>\n      </form>\n    </>\n  );\n};\n\nexport default ContactsForm;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["nameId","nanoid","telId","dispatch","useDispatch","onSubmit","event","preventDefault","name","target","value","number","newContact","id","addContact","currentTarget","reset","className","css","autoComplete","htmlFor","type","pattern","title","required","maxLength","xmlns","width","viewBox","strokeWidth","strokeLinejoin","strokeLinecap","stroke","height","fill","y2","y1","x2","x1","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}