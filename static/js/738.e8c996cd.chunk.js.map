{"version":3,"file":"static/js/738.e8c996cd.chunk.js","mappings":"kMACA,GAAgB,YAAc,mCAAmC,YAAc,mCAAmC,MAAQ,6BAA6B,IAAM,4B,4BC0B7J,EAtBsB,WACpB,IAAMA,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAMjB,OACE,+BACE,mBAAOC,QAASJ,EAAUK,UAAWC,EAAAA,YAArC,WACE,iBAAMD,UAAWC,EAAAA,WAAjB,SAAiC,2BACjC,kBACED,UAAWC,EAAAA,YACXC,SAVa,SAAAC,GACnB,IAAMC,EAAcD,EAAME,OAAOC,MACjCT,GAASU,EAAAA,EAAAA,IAAUH,GACpB,EAQOI,GAAIb,QAKb,C,wDCxBM,IAkBIC,EAAS,eAACa,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACL,EAAIM,GAWvD,OAREN,IAFFM,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["webpack://react-homework-template/./src/components/ContactFilter/ContactFilter.module.css?a140","components/ContactFilter/ContactFilter.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"inputFilter\":\"ContactFilter_inputFilter__D2iI8\",\"labelFilter\":\"ContactFilter_labelFilter__0dq-R\",\"input\":\"ContactFilter_input__8mWOi\",\"cut\":\"ContactFilter_cut__Dgq8a\"};","import { useDispatch } from 'react-redux';\nimport css from './ContactFilter.module.css';\nimport { setFilter } from 'redux/filterReduce';\nimport { nanoid } from 'nanoid';\n\nconst ContactFilter = () => {\n  const filterId = nanoid();\n  const dispatch = useDispatch();\n\n  const handleChange = event => {\n    const valueFilter = event.target.value;\n    dispatch(setFilter(valueFilter));\n  };\n  return (\n    <>\n      <label htmlFor={filterId} className={css.labelFilter}>\n        <span className={css.spanFilter}>Find Contacts by name</span>\n        <input\n          className={css.inputFilter}\n          onChange={handleChange}\n          id={filterId}\n        />\n      </label>\n    </>\n  );\n};\n\nexport default ContactFilter;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["filterId","nanoid","dispatch","useDispatch","htmlFor","className","css","onChange","event","valueFilter","target","value","setFilter","id","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}